#!/usr/bin/env python
'''
Created on 14 Jun 2012

@author: david
'''

import sys
import math
from collections import OrderedDict
from itertools import chain
from argparse import ArgumentParser, REMAINDER
from tracealyze import LogSource, Log, EntryGroup

class Average(object):
    def __init__(self, name=''):
        self.total = 0.0
        self.sumofsquares = 0.0
        self.max = 0.0
        self.min = None
        self.count = 0
        self.name = name
    
    def add(self, num):
        self.count += 1
        self.total += num
        self.sumofsquares += num*num
        if self.min == None:
            self.min = num
        else:
            self.min = min(self.min, num)
        self.max = max(self.max, num)
        
    @property
    def mean(self):
        if self.count == 0:
            return 0.0
        else:
            return self.total/self.count
    
    @property
    def variance(self):
        if self.count == 0:
            return 0.0
        else:
            return self.sumofsquares / self.count - (self.total / self.count)**2
    
    @property
    def stdev(self):
        return math.sqrt(self.variance)
    
    def __str__(self):
        if self.min == None:
            min= 0.0
        else:
            min = self.min
        return 'total {:6.4f} count {:4} mean {:.5f} stdev {:.5f} min {:.5f} max {:.5f}'.format(self.total, self.count, self.mean, self.stdev, min, self.max)
    
    def __repr__(self):
        return str(self.total) + '/' + str(self.count)

if __name__ == '__main__':
    parser = ArgumentParser(description='Account for where time is being spent.')
    parser.add_argument('--coalesce', help='Coalesce messages of the same type', action='store_true')
    parser.add_argument('files', metavar='FILE', type=LogSource, nargs=REMAINDER, help='Trace file', default=[sys.stdin])
    params = parser.parse_args()
    
    timesets = {}
    
    log = Log(chain.from_iterable(params.files))
    otsgroups = sorted(log.groupByOts(), lambda x,y: cmp(x.earliest().time, y.earliest().time))    
    for group in otsgroups:
        if params.coalesce:
            group.coalesceByType()
        grouptype = ' '.join(x.type for x in group)
        if not timesets.has_key(grouptype):
            timesets[grouptype] = [Average("Total duration")] + [Average(x.type+" until "+y.type) for (x,y) in zip(group.entries, group.entries[1:])]
        timesets[grouptype][0].add(group.duration())
        for i in xrange(len(group.entries)-1):
            timesets[grouptype][i+1].add(group.entries[i+1].latest().time - group.entries[i].earliest().time)
    
    timesets['gaps']=[Average()]
    for i in xrange(len(otsgroups)-1):
        timesets['gaps'][0].add(otsgroups[i+1].earliest().time - otsgroups[i].latest().time)
    
    print "Total Observed Log Time"
    print "======================="
    print log.duration()
    
    for (name, times) in timesets.iteritems():
        print
        print name
        print '=' * len(name)
        for ave in times:
            if ave.name is not '':
                print ave.name
            print '', ave
